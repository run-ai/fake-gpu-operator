name: CI - tag

on:
  push:
    paths-ignore:
      - ".github/**"
    tags:
      - "[0-9].*.*"

concurrency:
  group: ${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: false

permissions:
  checks: write
  contents: read
  pull-requests: write
  id-token: write
  security-events: write
  actions: read
  repository-projects: read

env:
  STAGING_ENVIRONMENT: "staging"
  PROD_ENVIRONMENT: "prod"
  STAGING_CONTAINER_REGISTRY: "fake-gpu-operator-containers-staging"
  PROD_CONTAINER_REGISTRY: "fake-gpu-operator-containers-prod"
  STAGING_HELM_REGISTRY: "fake-gpu-operator-charts-staging"
  PROD_HELM_REGISTRY: "fake-gpu-operator-charts-staging"
  ENV_IN_A_CLICK_CLUSTER_NAME_PREFIX: "fgo" # fake-gpu-operator short
  ARGO_CD_SECRET_NAME: "INFRA_ARGOCD_TOKEN_CICD"
  ARGO_CD_TEAM_NAME: "cicd"
  SERVICE_LIST: "fake-gpu-operator
    fake-gpu-operator-chart"

jobs:
  env:
    runs-on: ubuntu-latest
    name: Set environment
    outputs:
      PROD_ENVIRONMENT: ${{ env.PROD_ENVIRONMENT }}
      STAGING_ENVIRONMENT: ${{ env.STAGING_ENVIRONMENT }}
      STAGING_CONTAINER_REGISTRY: ${{ env.STAGING_CONTAINER_REGISTRY }}
      PROD_CONTAINER_REGISTRY: ${{ env.PROD_CONTAINER_REGISTRY }}
      VERSION: ${{ steps.env.outputs.version }}
      STAGING_HELM_REGISTRY: ${{ env.STAGING_HELM_REGISTRY }}
      PROD_HELM_REGISTRY: ${{ env.PROD_HELM_REGISTRY }}
      CLUSTER_NAME: ${{ steps.env.outputs.cluster_name }}
      SERVICE_LIST: ${{ env.SERVICE_LIST }}
      ARGO_CD_SECRET_NAME: ${{ env.ARGO_CD_SECRET_NAME }}
      ARGO_CD_TEAM_NAME: ${{ env.ARGO_CD_TEAM_NAME }}
      DEPLOY_TO_PROD: ${{ steps.env.outputs.deploy_to_prod }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: set env
        id: env
        run: |
          branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          branch_name_md5=$(echo $branch | md5sum | cut -d' ' -f1 )
          unique_branch_id=${branch_name_md5: -4}
          branch=$(echo $branch | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9-]//g' -e 's/--+/--/g' -e 's/^-*//' -e 's/-*$//' -e 's/-*-/-/g' | cut -c1-21 )
          [ "${branch: -1}" == "-" ] && branch=${branch: : -1} # If branch ends with '-' removing last character
          cluster_name=${{ env.ENV_IN_A_CLICK_CLUSTER_NAME_PREFIX }}-$unique_branch_id-$branch
          echo cluster_name=$cluster_name >> $GITHUB_OUTPUT
          version="${{ github.ref_name }}"
          deploy_to_prod=false
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Deploying to production"
            deploy_to_prod=true
          fi
          echo deploy_to_prod=$deploy_to_prod >> $GITHUB_OUTPUT
          echo version=$version >> $GITHUB_OUTPUT
          echo $version
          echo $cluster_name

  get-service-list:
    name: Get service list
    needs: env
    uses: run-ai/runai-actions/.github/workflows/get-service-list-v2.yml@main
    secrets: inherit
    with:
      service_list: ${{ needs.env.outputs.SERVICE_LIST }}

  docker-login:
    name: Docker login
    uses: run-ai/runai-actions/.github/workflows/docker-login-v2.yaml@main
    needs: env
    secrets: inherit
    with:
      env: ${{ needs.env.outputs.STAGING_ENVIRONMENT }}

  make:
    name: Make
    needs: [get-service-list, env, docker-login]
    strategy:
      fail-fast: false
      matrix:
        service_list: ${{ fromJson(needs.get-service-list.outputs.service_list).service_list }}
    uses: run-ai/runai-actions/.github/workflows/make-v2.yml@main
    secrets: inherit
    with:
      service_name: ${{ matrix.service_list }}
      version: ${{ needs.env.outputs.VERSION }}
      registry: ${{ needs.env.outputs.STAGING_CONTAINER_REGISTRY }}
      env: ${{ needs.env.outputs.STAGING_ENVIRONMENT }}

  build-and-push-staging:
    name: Build and push
    needs: [make, env, get-service-list]
    uses: run-ai/runai-actions/.github/workflows/build-and-push-v2.yml@main
    strategy:
      fail-fast: false
      matrix:
        service_list: ${{ fromJson(needs.get-service-list.outputs.service_list).service_list }}
    secrets: inherit
    with:
      service_name: ${{ matrix.service_list }}
      container_registry: ${{ needs.env.outputs.STAGING_CONTAINER_REGISTRY }}
      helm_registry: ${{ needs.env.outputs.STAGING_HELM_REGISTRY }}
      version: ${{ needs.env.outputs.VERSION }}
      env: ${{ needs.env.outputs.STAGING_ENVIRONMENT }}

  setup-env:
    name: Setup environment
    needs: env
    uses: run-ai/runai-actions/.github/workflows/create-env-in-a-click-v2.yml@main
    secrets: inherit
    with:
      cluster_name: ${{ needs.env.outputs.CLUSTER_NAME }}
      runai-cluster-enabled: false
      runai-control-plane-enabled: false
      knative-operator: true
      secret-name: ${{ needs.env.outputs.ARGO_CD_SECRET_NAME }}
      team-name: ${{ needs.env.outputs.ARGO_CD_TEAM_NAME }}
      fake-gpu-version: ${{ needs.env.outputs.VERSION }}
      wait-for-sync: true

  wait-for-approval:
    if: ${{ needs.env.outputs.DEPLOY_TO_PROD == 'true' }}
    name: Wait for approval
    environment: prod
    needs: [setup-env, env]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for approval to deploy to production
        run: |
          echo "Waiting for approval"

  promote-artifacts:
    name: Promote artifacts
    needs: [env, wait-for-approval, get-service-list]
    uses: run-ai/runai-actions/.github/workflows/promote-artifacts-v2.yml@main
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        service_list: ${{ fromJson(needs.get-service-list.outputs.service_list).service_list }}
    with:
      service_name: ${{ matrix.service_list }}
      version: ${{ needs.env.outputs.VERSION }}
      from_env: ${{ needs.env.outputs.STAGING_ENVIRONMENT }}
      to_env: ${{ needs.env.outputs.PROD_ENVIRONMENT }}
      from_container_registry: ${{ needs.env.outputs.STAGING_CONTAINER_REGISTRY }}
      to_container_registry: ${{ needs.env.outputs.PROD_CONTAINER_REGISTRY }}

  make-prod:
    name: Make fake-gpu-operator-chart only
    needs: [promote-artifacts, env]
    uses: run-ai/runai-actions/.github/workflows/make-v2.yml@main
    secrets: inherit
    with:
      service_name: fake-gpu-operator-chart
      version: ${{ needs.env.outputs.VERSION }}
      registry: ${{ needs.env.outputs.PROD_CONTAINER_REGISTRY }}
      env: ${{ needs.env.outputs.PROD_ENVIRONMENT }}

  build-and-push-prod:
    name: Build and push fake-gpu-operator-chart only
    needs: [env, make-prod]
    uses: run-ai/runai-actions/.github/workflows/build-and-push-v2.yml@main
    secrets: inherit
    with:
      service_name: fake-gpu-operator-chart
      helm_registry: ${{ needs.env.outputs.PROD_HELM_REGISTRY }}
      version: ${{ needs.env.outputs.VERSION }}
      env: ${{ needs.env.outputs.PROD_ENVIRONMENT }}

  send-logs-to-loki:
    name: Send logs to Loki
    needs:
      [
        env,
        get-service-list,
        docker-login,
        setup-env,
        make,
        build-and-push-staging,
        promote-artifacts,
        make-prod,
        build-and-push-prod,
      ]
    if: failure() || success()
    uses: run-ai/runai-actions/.github/workflows/send-log-to-loki-v2.yml@main
    secrets: inherit
