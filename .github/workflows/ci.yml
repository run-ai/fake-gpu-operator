name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: "ghcr.io/run-ai/fake-gpu-operator"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Cache linter
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: ${{ runner.os }}-lint-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-lint-
      - name: Run lint
        run: make lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Run tests
        run: make test

  set-release-vars:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.vars.outputs.release_version }}
    steps:
      - name: Set release variables
        id: vars
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/ ]]; then
            # Version tag
            echo "release_version=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            # Push to main
            echo "release_version=0.0.0-$GITHUB_SHA" >> $GITHUB_OUTPUT
          fi

  release-docker:
    runs-on: ubuntu-latest
    needs: [set-release-vars, lint, test]
    if: ${{ needs.set-release-vars.outputs.release_version != '' }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [device-plugin, status-updater, kwok-gpu-device-plugin, status-exporter, topology-server, mig-faker, jupyter-notebook]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ matrix.component }}:${{ needs.set-release-vars.outputs.release_version }}
          target: ${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,name=${{ matrix.component }}-cache

  release-helm:
    runs-on: ubuntu-latest
    needs: [release-docker, set-release-vars]
    if: ${{ needs.set-release-vars.outputs.release_version != '' }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: |
          helm package deploy/fake-gpu-operator -d ./charts --version ${{ needs.set-release-vars.outputs.release_version }} --app-version ${{ needs.set-release-vars.outputs.release_version }}
      - name: Push
        run: |
          helm push ./charts/fake-gpu-operator-${{ needs.set-release-vars.outputs.release_version }}.tgz oci://${{ env.DOCKER_REGISTRY }}
