name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CONTAINER_REGISTRY_TEST: https://runai.jfrog.io/artifactory/fake-gpu-operator-containers-test
  HELM_REGISTRY_TEST: https://runai.jfrog.io/artifactory/fake-gpu-operator-charts-test
  CONTAINER_REGISTRY_LAB: https://runai.jfrog.io/artifactory/fake-gpu-operator-containers-lab
  HELM_REGISTRY_LAB: https://runai.jfrog.io/artifactory/fake-gpu-operator-charts-lab

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Cache lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: ${{ runner.os }}-lint-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-lint-
      - name: Run lint
        run: make lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Run tests
        run: make test

  set-release-vars:
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    uses: ./.github/workflows/set-release-vars.yml

  release-docker:
    runs-on: ubuntu-latest
    needs: [set-release-vars, lint, test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    # Matrix of all components to build and push
    strategy:
      matrix:
        component: [
          device-plugin,
          status-updater,
          kwok-gpu-device-plugin,
          status-exporter,
          topology-server,
          mig-faker,
          jupyter-notebook
        ]
    steps:
      - uses: actions/checkout@v4
      - name: Artifactory login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ARTIFACTORY_ENDPOINT }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push docker
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.ARTIFACTORY_ENDPOINT }}/${{ needs.set-release-vars.outputs.container_repo }}/${{ matrix.component }}:${{ needs.set-release-vars.outputs.version }}
          target: ${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ secrets.ARTIFACTORY_ENDPOINT }}/cache/fake-gpu-operator:cache
          cache-to: type=registry,ref=${{ secrets.ARTIFACTORY_ENDPOINT }}/cache/fake-gpu-operator:cache,mode=max

  release-helm:
    runs-on: ubuntu-latest
    needs: [release-docker, set-release-vars]
    steps:
      - uses: actions/checkout@v4
      - name: Install helm
        uses: azure/setup-helm@v4.3.0
      - name: Install jfrog cli
        run: |
          curl -fL https://install-cli.jfrog.io | sh
      - name: Add artifactory repo
        run: |
          jf c add runai --url https://${{ secrets.ARTIFACTORY_ENDPOINT }} --user ${{ secrets.ARTIFACTORY_USERNAME }} --password ${{ secrets.ARTIFACTORY_TOKEN }} --interactive=false
      - name: Build and push helm
        run: |
          sed -i 's/repository: runai.jfrog.io\/fake-gpu-operator-containers-prod/repository: ${{ secrets.ARTIFACTORY_ENDPOINT }}\/${{ needs.set-vars.outputs.container_repo }}/' deploy/fake-gpu-operator/values.yaml

          helm package deploy/fake-gpu-operator --version ${{ needs.set-release-vars.outputs.version }} --app-version ${{ needs.set-release-vars.outputs.version }}
          jf rt upload "*.tgz" ${{ needs.set-release-vars.outputs.helm_repo }}

